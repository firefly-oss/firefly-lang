/**
 * Firefly DateTime Type
 * 
 * Represents a date and time without timezone information.
 * This is Firefly's native datetime type, internally backed by java.time.LocalDateTime
 * but exposed with Firefly-idiomatic APIs.
 *
 * @module firefly::std::time::DateTime
 * @since 1.0.0
 */

module firefly::std::time

use java::time::LocalDateTime

/**
 * DateTime represents a date and time (year, month, day, hour, minute, second) without timezone.
 * 
 * Examples:
 * ```firefly
 * let now = DateTime.now()
 * let meeting = DateTime.of(2025, 10, 31, 14, 30, 0)
 * let later = now.plusHours(2)
 * ```
 */
class DateTime {
    priv let internal: LocalDateTime;
    
    priv init(ldt: LocalDateTime) {
        self.internal = ldt;
    }
    
    pub static fn now() -> DateTime {
        return new DateTime(LocalDateTime::now());
    }
    
    pub static fn of(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int) -> DateTime {
        return new DateTime(LocalDateTime::of(year, month, day, hour, minute, second));
    }
    
    pub static fn parse(text: String) -> DateTime {
        return new DateTime(LocalDateTime::parse(text));
    }
    
    pub fn year() -> Int {
        let ldt: LocalDateTime = self.internal;
        return ldt::getYear();
    }
    
    pub fn month() -> Int {
        let ldt: LocalDateTime = self.internal;
        return ldt::getMonthValue();
    }
    
    pub fn day() -> Int {
        let ldt: LocalDateTime = self.internal;
        return ldt::getDayOfMonth();
    }
    
    pub fn hour() -> Int {
        let ldt: LocalDateTime = self.internal;
        return ldt::getHour();
    }
    
    pub fn minute() -> Int {
        let ldt: LocalDateTime = self.internal;
        return ldt::getMinute();
    }
    
    pub fn second() -> Int {
        let ldt: LocalDateTime = self.internal;
        return ldt::getSecond();
    }
    
    pub fn plusHours(hours: Int) -> DateTime {
        let ldt: LocalDateTime = self.internal;
        return new DateTime(ldt::plusHours(hours));
    }
    
    pub fn plusMinutes(minutes: Int) -> DateTime {
        let ldt: LocalDateTime = self.internal;
        return new DateTime(ldt::plusMinutes(minutes));
    }
    
    pub fn plusDays(days: Int) -> DateTime {
        let ldt: LocalDateTime = self.internal;
        return new DateTime(ldt::plusDays(days));
    }
    
    pub fn isBefore(other: DateTime) -> Bool {
        let ldt: LocalDateTime = self.internal;
        let otherLdt: LocalDateTime = other.internal;
        return ldt::isBefore(otherLdt);
    }
    
    pub fn isAfter(other: DateTime) -> Bool {
        let ldt: LocalDateTime = self.internal;
        let otherLdt: LocalDateTime = other.internal;
        return ldt::isAfter(otherLdt);
    }
    
    pub fn toString() -> String {
        let ldt: LocalDateTime = self.internal;
        return ldt::toString();
    }
}
