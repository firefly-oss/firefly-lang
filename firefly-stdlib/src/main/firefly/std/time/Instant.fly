/**
 * Firefly Instant Type
 * 
 * Represents an instantaneous point on the timeline (timestamp).
 * This is Firefly's native timestamp type, internally backed by java.time.Instant
 * but exposed with Firefly-idiomatic APIs.
 *
 * @module firefly::std::time::Instant
 * @since 1.0.0
 */

module firefly::std::time



/**
 * Instant represents a precise moment on the global timeline.
 * Unlike Date or DateTime, Instant is always in UTC.
 * 
 * Examples:
 * ```firefly
 * let now = Instant.now()
 * let epoch = Instant.ofEpochSecond(0)
 * let later = now.plusSeconds(3600)
 * ```
 */
class Instant {
    priv let internal: java::time::Instant;
    
    priv init(inst: java::time::Instant) {
        self.internal = inst;
    }
    
    pub static fn now() -> Instant {
        return new Instant(java::time::Instant::now());
    }
    
    pub static fn ofEpochSecond(seconds: Long) -> Instant {
        return new Instant(java::time::Instant::ofEpochSecond(seconds));
    }
    
    pub static fn ofEpochMilli(millis: Long) -> Instant {
        return new Instant(java::time::Instant::ofEpochMilli(millis));
    }
    
    pub static fn parse(text: String) -> Instant {
        return new Instant(java::time::Instant::parse(text));
    }
    
    pub fn toEpochSecond() -> Long {
        let ji: java::time::Instant = self.internal;
        return ji::getEpochSecond();
    }
    
    pub fn toEpochMilli() -> Long {
        let ji: java::time::Instant = self.internal;
        return ji::toEpochMilli();
    }
    
    pub fn plusSeconds(seconds: Long) -> Instant {
        let ji: java::time::Instant = self.internal;
        return new Instant(ji::plusSeconds(seconds));
    }
    
    pub fn plusMillis(millis: Long) -> Instant {
        let ji: java::time::Instant = self.internal;
        return new Instant(ji::plusMillis(millis));
    }
    
    pub fn minusSeconds(seconds: Long) -> Instant {
        let ji: java::time::Instant = self.internal;
        return new Instant(ji::minusSeconds(seconds));
    }
    
    pub fn isBefore(other: Instant) -> Bool {
        let ji: java::time::Instant = self.internal;
        let otherJi: java::time::Instant = other.internal;
        return ji::isBefore(otherJi);
    }
    
    pub fn isAfter(other: Instant) -> Bool {
        let ji: java::time::Instant = self.internal;
        let otherJi: java::time::Instant = other.internal;
        return ji::isAfter(otherJi);
    }
    
    pub fn toString() -> String {
        let ji: java::time::Instant = self.internal;
        return ji::toString();
    }
}
