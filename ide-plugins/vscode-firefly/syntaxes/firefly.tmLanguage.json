{
  "name": "Firefly",
  "scopeName": "source.firefly",
  "fileTypes": ["fly"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#annotations" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#lambdas" },
    { "include": "#functions" },
    { "include": "#types" },
    { "include": "#variables" },
    { "include": "#operators" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.firefly",
          "match": "//.*$"
        },
        {
          "name": "comment.block.firefly",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "storage.type.annotation.firefly",
          "match": "@[A-Za-z][A-Za-z0-9_]*",
          "captures": {
            "0": { "name": "storage.type.annotation.firefly" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.firefly",
          "match": "\\b(if|else|match|case|for|while|in|return|break|continue|try|catch|finally|throw)\\b"
        },
        {
          "name": "keyword.declaration.firefly",
          "match": "\\b(fn|let|mut|class|interface|struct|data|trait|impl|type|init|new|actor|protocol|extend|context|supervisor|flow|stage|macro)\\b"
        },
        {
          "name": "keyword.modifier.firefly",
          "match": "\\b(pub|priv|public|private|protected|static|final|async|concurrent)\\b"
        },
        {
          "name": "keyword.other.firefly",
          "match": "\\b(module|use|self|extends|implements|as|is|await|with|using|when|requires|receive|spawn|race|timeout)\\b"
        },
        {
          "name": "constant.language.firefly",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.firefly",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.firefly",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.firefly",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.firefly",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.firefly",
          "match": "\\b0x[0-9a-fA-F]+(_[0-9a-fA-F]+)*\\b"
        },
        {
          "name": "constant.numeric.binary.firefly",
          "match": "\\b0b[01]+(_[01]+)*\\b"
        },
        {
          "name": "constant.numeric.octal.firefly",
          "match": "\\b0o[0-7]+(_[0-7]+)*\\b"
        },
        {
          "name": "constant.numeric.float.firefly",
          "match": "\\b[0-9]+(_[0-9]+)*\\.[0-9]+(_[0-9]+)*([eE][+-]?[0-9]+(_[0-9]+)*)?\\b"
        },
        {
          "name": "constant.numeric.integer.firefly",
          "match": "\\b[0-9]+(_[0-9]+)*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.firefly",
          "match": "\\b(async\\s+)?(fn)\\s+([a-z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.modifier.firefly" },
            "2": { "name": "keyword.declaration.firefly" },
            "3": { "name": "entity.name.function.firefly" }
          }
        },
        {
          "name": "support.function.builtin.firefly",
          "match": "\\b(println|print|panic|assert|spawn|receive|timeout|race)\\b"
        },
        {
          "name": "meta.function.call.firefly",
          "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": { "name": "entity.name.function.call.firefly" }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.firefly",
          "match": "\\b(Int|Long|Float|Double|Boolean|String|Void|Char|Byte|Short)\\b"
        },
        {
          "name": "support.type.collection.firefly",
          "match": "\\b(Array|List|Map|Set|Vector|HashMap|HashSet|LinkedList|TreeMap|TreeSet)\\b"
        },
        {
          "name": "support.type.option.firefly",
          "match": "\\b(Option|Some|None|Result|Ok|Err)\\b"
        },
        {
          "name": "support.type.async.firefly",
          "match": "\\b(Future|Promise|Stream|Channel|Actor)\\b"
        },
        {
          "name": "entity.name.type.class.firefly",
          "match": "\\b(class|interface|struct|data|trait)\\s+([A-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.declaration.firefly" },
            "2": { "name": "entity.name.type.class.firefly" }
          }
        },
        {
          "name": "entity.name.type.firefly",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.firefly",
          "match": "(->|=>)"
        },
        {
          "name": "keyword.operator.null-coalescing.firefly",
          "match": "(\\?\\?|\\?\\.|\\?:|!!)"
        },
        {
          "name": "keyword.operator.range.firefly",
          "match": "(\\.\\.|\\.\\.=)"
        },
        {
          "name": "keyword.operator.logical.firefly",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.comparison.firefly",
          "match": "(===|!==|==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.firefly",
          "match": "(\\+\\+|--|\\+|-|\\*\\*|\\*|/|%)"
        },
        {
          "name": "keyword.operator.bitwise.firefly",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.assignment.firefly",
          "match": "(\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=|=)"
        },
        {
          "name": "keyword.operator.message.firefly",
          "match": ">>"
        },
        {
          "name": "keyword.operator.scope.firefly",
          "match": "::"
        },
        {
          "name": "keyword.operator.lambda.firefly",
          "match": "\\|"
        },
        {
          "name": "keyword.operator.question.firefly",
          "match": "\\?"
        }
      ]
    },
    "lambdas": {
      "patterns": [
        {
          "name": "meta.lambda.firefly",
          "match": "\\|([^|]*)\\|",
          "captures": {
            "0": { "name": "meta.lambda.parameters.firefly" },
            "1": { "name": "variable.parameter.firefly" }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "meta.variable.declaration.firefly",
          "match": "\\b(let)\\s+(mut\\s+)?([a-z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.declaration.firefly" },
            "2": { "name": "keyword.modifier.firefly" },
            "3": { "name": "variable.other.firefly" }
          }
        },
        {
          "name": "variable.language.self.firefly",
          "match": "\\bself\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.firefly",
          "match": ";"
        },
        {
          "name": "punctuation.separator.firefly",
          "match": ","
        },
        {
          "name": "punctuation.accessor.firefly",
          "match": "\\."
        },
        {
          "name": "punctuation.section.braces.firefly",
          "match": "[{}]"
        },
        {
          "name": "punctuation.section.brackets.firefly",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.section.parens.firefly",
          "match": "[()]"
        }
      ]
    }
  }
}
